# Generated by Django 4.2.25 on 2025-10-16 20:37

from django.db import migrations


def merge_silka_into_workout(apps, schema_editor):
    """Merge siłka habit into workout habit by updating all related records"""
    Habit = apps.get_model("tree", "Habit")
    HabitTracked = apps.get_model("tree", "HabitTracked")
    Event = apps.get_model("tree", "Event")

    db_alias = schema_editor.connection.alias

    try:
        silka_habit = Habit.objects.using(db_alias).get(slug='silka')
    except Habit.DoesNotExist:
        # If siłka doesn't exist, nothing to migrate
        return

    try:
        workout_habit = Habit.objects.using(db_alias).get(slug='workout')
    except Habit.DoesNotExist:
        # If workout doesn't exist, just rename siłka to workout
        silka_habit.name = 'Workout'
        silka_habit.slug = 'workout'
        silka_habit.tagname = 'workout'
        silka_habit.save()
        return

    # Update all HabitTracked events from siłka to workout
    HabitTracked.objects.using(db_alias).filter(
        habit=silka_habit
    ).update(habit=workout_habit)

    # Update all Event records with siłka's event_stream_id to workout's event_stream_id
    Event.objects.using(db_alias).filter(
        event_stream_id=silka_habit.event_stream_id
    ).update(event_stream_id=workout_habit.event_stream_id)

    # Delete the siłka habit
    silka_habit.delete()


def reverse_merge(apps, schema_editor):
    """
    Reverse the merge by recreating siłka habit and moving events back based on note field.
    Events with notes starting with #siłka or !siłka are moved back to siłka habit.
    """
    Habit = apps.get_model("tree", "Habit")
    HabitTracked = apps.get_model("tree", "HabitTracked")

    db_alias = schema_editor.connection.alias

    try:
        workout_habit = Habit.objects.using(db_alias).get(slug='workout')
    except Habit.DoesNotExist:
        # If workout doesn't exist, nothing to reverse
        return

    # Create the siłka habit
    silka_habit = Habit.objects.using(db_alias).create(
        name='Siłka',
        slug='silka',
        tagname='siłka'
    )

    # Find all HabitTracked events that originally belonged to siłka
    # (identified by notes starting with #siłka or !siłka)
    silka_habit_tracked = HabitTracked.objects.using(db_alias).filter(
        habit=workout_habit
    ).filter(
        note__istartswith='#siłka'
    ) | HabitTracked.objects.using(db_alias).filter(
        habit=workout_habit
    ).filter(
        note__istartswith='!siłka'
    )

    # Get the IDs of HabitTracked events to update
    silka_habit_tracked_ids = list(silka_habit_tracked.values_list('id', flat=True))

    # Update HabitTracked events in batches of 100
    batch_size = 100
    for i in range(0, len(silka_habit_tracked_ids), batch_size):
        batch_ids = silka_habit_tracked_ids[i:i + batch_size]
        HabitTracked.objects.using(db_alias).filter(
            id__in=batch_ids
        ).update(
            habit=silka_habit,
            event_stream_id=silka_habit.event_stream_id
        )


class Migration(migrations.Migration):

    dependencies = [
        ('tree', '0053_observation_user'),
    ]

    operations = [
        migrations.RunPython(merge_silka_into_workout, reverse_merge),
    ]
