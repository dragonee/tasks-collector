# Generated by Django 4.2.18 on 2025-07-10 10:35

from django.db import migrations
from django.utils import timezone
import uuid


def create_projected_outcome_made_events(apps, schema_editor):
    """Create unique UUIDs for ProjectedOutcome items and create ProjectedOutcomeMade events"""
    ProjectedOutcome = apps.get_model('tree', 'ProjectedOutcome')
    ProjectedOutcomeMade = apps.get_model('tree', 'ProjectedOutcomeMade')
    Thread = apps.get_model('tree', 'Thread')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the ContentType for ProjectedOutcomeMade
    try:
        projected_outcome_made_ct = ContentType.objects.get(
            app_label='tree', 
            model='projectedoutcomemade'
        )
    except ContentType.DoesNotExist:
        # If ContentType doesn't exist yet, we can't proceed
        return
    
    # Get or create the default thread (big-picture)
    try:
        default_thread = Thread.objects.get(name='big-picture')
    except Thread.DoesNotExist:
        # If big-picture thread doesn't exist, get the first available thread
        default_thread = Thread.objects.first()
        if not default_thread:
            # This shouldn't happen, but just in case
            return
    
    # First, assign unique UUIDs to all ProjectedOutcome items
    for projected_outcome in ProjectedOutcome.objects.all():
        # Generate a new unique UUID for each ProjectedOutcome
        projected_outcome.event_stream_id = uuid.uuid4()
        projected_outcome.save(update_fields=['event_stream_id'])
    
    # Then create ProjectedOutcomeMade events for all ProjectedOutcome items
    for projected_outcome in ProjectedOutcome.objects.all():
        # Create the ProjectedOutcomeMade event with proper polymorphic_ctype
        ProjectedOutcomeMade.objects.create(
            projected_outcome=projected_outcome,
            name=projected_outcome.name,
            description=projected_outcome.description,
            resolved_by=projected_outcome.resolved_by,
            success_criteria=projected_outcome.success_criteria,
            event_stream_id=projected_outcome.event_stream_id,
            thread=default_thread,
            published=projected_outcome.published,  # Use the original published date
            polymorphic_ctype=projected_outcome_made_ct  # Set the polymorphic content type
        )


def reverse_projected_outcome_made_events(apps, schema_editor):
    """Remove all ProjectedOutcomeMade events (reverse migration)"""
    ProjectedOutcomeMade = apps.get_model('tree', 'ProjectedOutcomeMade')
    ProjectedOutcomeMade.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('tree', '0047_alter_projectedoutcome_options_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_projected_outcome_made_events,
            reverse_projected_outcome_made_events,
        ),
    ]
