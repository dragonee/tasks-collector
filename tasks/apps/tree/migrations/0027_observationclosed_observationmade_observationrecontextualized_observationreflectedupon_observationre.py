# Generated by Django 3.2.16 on 2024-03-31 12:54

from django.db import migrations, models
import django.db.models.deletion
import tasks.apps.tree.models


class Migration(migrations.Migration):

    dependencies = [
        ('tree', '0026_alter_board_event_stream_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='ObservationRecontextualized',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tree.event')),
                ('old_situation', models.TextField(blank=True)),
                ('situation', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tree.event', tasks.apps.tree.models.ObservationEventMixin),
        ),
        migrations.CreateModel(
            name='ObservationReflectedUpon',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tree.event')),
                ('old_approach', models.TextField(blank=True)),
                ('approach', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tree.event', tasks.apps.tree.models.ObservationEventMixin),
        ),
        migrations.CreateModel(
            name='ObservationReinterpreted',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tree.event')),
                ('old_interpretation', models.TextField(blank=True)),
                ('interpretation', models.TextField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tree.event', tasks.apps.tree.models.ObservationEventMixin),
        ),
        migrations.CreateModel(
            name='ObservationMade',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tree.event')),
                ('situation', models.TextField(blank=True, help_text='What happened?', null=True)),
                ('interpretation', models.TextField(blank=True, help_text='How you saw it, what you felt?', null=True)),
                ('approach', models.TextField(blank=True, help_text='How should you approach it in the future?', null=True)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tree.observationtype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tree.event', tasks.apps.tree.models.ObservationEventMixin),
        ),
        migrations.CreateModel(
            name='ObservationClosed',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tree.event')),
                ('situation', models.TextField(blank=True, help_text='What happened?', null=True)),
                ('interpretation', models.TextField(blank=True, help_text='How you saw it, what you felt?', null=True)),
                ('approach', models.TextField(blank=True, help_text='How should you approach it in the future?', null=True)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tree.observationtype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tree.event', tasks.apps.tree.models.ObservationEventMixin),
        ),
    ]
